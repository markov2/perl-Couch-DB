#!/usr/bin/env perl
use warnings;
use strict;

use LWP::UserAgent    ();
use HTML::TreeBuilder ();
use File::Slurper     qw(read_text read_lines write_text);
use URI::Escape       qw(uri_escape);
use Getopt::Long      qw(GetOptions);
use HTML::Entities    qw(encode_entities);

use Data::Dumper;
$Data::Dumper::Indent = 1;

my $couchdb_api   = 'https://docs.couchdb.org/en/stable';
my $couchdb_index = "$couchdb_api/http-routingtable.html";
my $couchdb_cache = '/tmp/couch-cache';
my $metacpan      = 'https://metacpan.org/dist/Couch-DB/view/';

GetOptions
	'refresh|r!' => \(my $refresh = 0),
	;

my %index;    # from the couchdb website
my %impls;    # from this module

####
###### parse the couchdb api index
####

sub fill_index()
{
	my $routing;
	if($refresh || ! -r $couchdb_cache || -M $couchdb_cache > 14)
	{	print "Loading new routing table from couchdb.org\n";
		my $ua = LWP::UserAgent->new;
		my $overview = $ua->get($couchdb_index);
		$routing     = $overview->decoded_content;
		write_text $couchdb_cache, $routing;
	}
	else
	{	$routing     = read_text $couchdb_cache;
	}
	
	my $tree = HTML::TreeBuilder->new_from_content($routing);
	#my $table = $tree->elementify->find('table');
	foreach my $tr ($tree->elementify->find('table')->find('tr'))
	{	my (undef, $which, $what) = $tr->find('td');
		my ($a)  = $which->find('a') or next;
		my $href = $a->attr('href');
		my $call = $a->find_by_attribute(class => 'xref')->content->[0];

		# Mistake in 3.3.3 docs
		$call    = 'POST /{db}/_design/{ddoc}/_update/{func}/{docid}'
			if $call eq 'PUT /{db}/_design/{ddoc}/_update/{func}/{docid}';

		my ($method, $endpoint) = split " ", $call, 2;
		my $descr = $what->as_text;
	
		my %def    = (
			call     => $call,
			method   => $method,
			endpoint => $endpoint,
			doclink  => "$couchdb_api/$href",
			descr    => $descr,
		);
		$index{$call} = \%def;
	}

	warn "Found ", scalar keys %index, " calls in the API docs\n";

}

####
###### parse the docs from implementation
####

my @modules = (
	{ file => 'lib/Couch/DB.pm',			base => '$couch' },
	{ file => 'lib/Couch/DB/Client.pm',		base => '$client' },
	{ file => 'lib/Couch/DB/Cluster.pm',	base => '$cluster' },
	{ file => 'lib/Couch/DB/Database.pm',	base => '$db' },
	{ file => 'lib/Couch/DB/Document.pm',	base => '$doc' },
 	{ file => 'lib/Couch/DB/Design.pm',		base => '$ddoc' },
	{ file => 'lib/Couch/DB/Node.pm',		base => '$node' },
);

sub fill_impls()
{
  MODULE:
	foreach my $module (@modules)
	{	my $last_use;
		my $package;

		my $file = $module->{file};
		unless(-e $file)
		{	print "Module $file does not exist yet.\n";
			next MODULE;
		}

		my $manpage  = $metacpan . ($file =~ s/\.pm$/.pod/r);

		foreach my $line (read_lines $file)
		{	$package = $1
				if $line =~ m/^package\s+([\w:]+)/;

			$last_use = "$module->{base}->$1($2)"
				if $line =~ m/^=method\s+(\w+)\s*(.*)/;

			my ($call, $status) = $line =~ /\[CouchDB API "([^"]+)".*?(|UNTESTED|TODO|UNSUPPORTED|PARTIAL)\]/
				or next;

			my ($method, $endpoint) = split " ", $call, 2;

			my $link = $manpage . '#' . uri_escape($last_use =~ s/.*->/\$obj->/r =~ s/\s/-/gr);
			my $use  = '<a href="' . $link . '">' . encode_entities($last_use) . '</a>';

			my %impl = (
				package  => $package,
				call     => $call,
				status   => $status || 'DONE',
				method   => $method,
				endpoint => $endpoint,
				use      => ($status eq 'UNSUPPORTED' ? '' : $use),
			);

			push @{$impls{$call}}, \%impl;
		}
	}

	warn "Found ", scalar keys %impls, " calls implemented.\n";
}

####
###### MAIN
####

fill_index;
#warn Dumper \%index;

fill_impls;
#warn Dumper \%impls;

my %methods_counts;
map $methods_counts{$_->{method}}++, @$_ for values %impls;
warn Dumper \%methods_counts;

my %status_counts;
map $status_counts{$_->{status}}++, @$_ for values %impls;
warn Dumper \%status_counts;

my %mistakes = map +($_ => 1), keys %impls;
delete @mistakes{keys %index};

delete $mistakes{"POST /{db}/_design_docs/queries"} or die;   # expected
delete $mistakes{"POST /{db}/_local_docs/queries"}  or die;    # expected
warn "Implementation mismatch: $_\n" for sort keys %mistakes;

sub create_index()
{	print <<__HEADER;
<!DOCTYPE html>
<html lang="en-EN">
<head>
  <title>Reference table</title>
  <meta charset="utf-8" />

  <style>
    TR.first  { margin-top: 4px }
    TD        { vertical-align: top }
    TD.api    { background: white }
    TD.use    { background: yellow }
    TD.api  A { text-decoration: none; font-family: monospace }
    TD.use  A { text-decoration: none; font-family: monospace }
	TD.descr P { margin: 0 0 10px 0; }
    TH { text-align: left }
    .count { text-align: right }
	TABLE#status-explain { padding-left: 3em }
	TABLE#cdb2mod { padding: 2ex 3em; }
  </style>
</head>
<body>
  <h1>Reference table</h1>

  <p>This page is generated when anything in the implementation changes,
  at least every release.  Sorry for the current ugly presentation: functionality
  first.</p>

  <h2>Development progress counts</h2>

  <p>The implementation is really new, therefore, not everything is ready and
  complete.  Below, you find the follow conditions.
  <table id="status-explain">
  <tr><td>DONE</td>
      <td class="count">$status_counts{DONE}</td>
      <td>Minimally tested: visual inspection only.</td></tr>
  <tr><td>PARTIAL</td>
      <td class="count">$status_counts{PARTIAL}</td>
      <td>Minimally tested, not completely implemented.</td></tr>
  <tr><td>UNTESTED</td>
      <td class="count">$status_counts{UNTESTED}</td>
      <td>Implemented but never tried.</td></tr>
  <tr><td>TODO</td>
      <td class="count">$status_counts{TODO}</td>
      <td>Implementation not started.</td></tr>
  <tr><td>UNSUPPORTED</td>
      <td class="count">$status_counts{UNSUPPORTED}</td>
      <td>For some reason, it seems useless to implement this.</td></tr>
  </table>

  <h2>Reference table</h2>

  <table id="cdb2mod">
  <tr><th style="width: 50%">API 3.3.3 and official summary</th>
      <th>impl status</th>
      <th>Couch::DB use</th></tr>

__HEADER

	foreach my $index (sort { $a->{endpoint} cmp $b->{endpoint} || $a->{method} cmp $b->{method}} values %index)
	{	my @impls = @{$impls{$index->{call}} || [ ]};
		@impls <= 2 or die $index->{call};  # CSS descr issue

		my $first = shift @impls || { status => 'MISSING', use => '' };

		print <<__ROW1;
  <tr class="first">
      <td class="api"><a href="$index->{doclink}">$index->{call}</a></td>
      <td class="status">$first->{status}</td>
      <td class="use">$first->{use}</td></tr>
__ROW1

		my $sec   = shift @impls;

		print $sec ? <<__ROW2a : <<__ROW2b;
  <tr><td class="descr"><p>$index->{descr}</p></td>
      <td class="status">$sec->{status}</td>
      <td class="use">$sec->{use}</td></tr>
__ROW2a
  <tr><td class="descr"><p>$index->{descr}</p></td>
      <td></td>
      <td></td></tr>
__ROW2b

	}

	print <<__FOOTER;
  </table>
</body>
</html>
__FOOTER
}

create_index();

